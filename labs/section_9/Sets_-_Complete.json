{"name":"Sets - Complete","fileName":"My Dopey Table Notebook.json","createdAt":"2022-03-17T19:26:09.425Z","cells":[{"id":"1647548463594","type":"markdown","content":"Sets store a collection of strings.  Each string in a set is guaranteed to be unique.  For example, you will never see the string `Hi there!` twice in a set.\n\nThe `SUNION`, `SINTER`, and `SDIFF` commands allow you to compare the differences between multiple sets.\n\n* A union returns all of the unique elements across multiple sets\n* An intersection returns all of the elements common to multiple sets\n* A difference returns elements present in the *first* set that are not present in any other\n\nSets are most useful for tracking the uniqueness of a value in an app.  A few examples:\n\n* A set can be used to make sure a username or email address is only used a single time in an app\n* Sets can be used to set up a relationship between different records\n* Set operations like `SINTER` can provide common attributes difference resources"},{"id":"1647548665651","type":"markdown","content":"`SADD` adds an element to a set stored at a key.  If a set doesn't already exist at the key, it will be created for you."},{"id":"ca699e5cfc26565c","type":"redis","content":"SADD colors red"},{"id":"1647548688792","type":"markdown","content":"`SMEMBERS` returns all the elements in a set.  Be cautious with this command if you expect your set to contain many elements.  If you are working with a large set, you might want to use `SSCAN` instead."},{"id":"1647545470649","type":"redis","content":"SMEMBERS colors"},{"id":"1647546622284","type":"redis","content":"SADD colors:1 red blue orange\nSADD colors:2 blue green purple\nSADD colors:3 blue red purple"},{"id":"1647548731010","type":"markdown","content":"`SUNION`returns all of the unique elements across multiple sets"},{"id":"1647546673393","type":"redis","content":"SUNION colors:1 colors:2 colors:3"},{"id":"1647548764026","type":"markdown","content":"`SINTER`  returns all of the elements common to multiple sets"},{"id":"1647546792273","type":"redis","content":"SINTER colors:1 colors:2 colors:3"},{"id":"1647548777052","type":"markdown","content":"`SDIFF` returns elements present in the *first* set that are not present in any other"},{"id":"1647546893681","type":"redis","content":"SDIFF colors:1 colors:2 colors:3"},{"id":"1647548785990","type":"markdown","content":"`SUNION`, `SINTER`, and `SDIFF` each have a 'store' variation that will store the result of the operation at a new key."},{"id":"1647547084592","type":"redis","content":"SINTERSTORE colors:results colors:1 colors:2 colors:3"},{"id":"1647548818444","type":"markdown","content":"`ISMEMBER` returns 1 if a value is present in a set and 0 if it is not."},{"id":"1647547518059","type":"redis","content":"SISMEMBER colors:1 purple"},{"id":"1647548831717","type":"markdown","content":"`SMISMEMBER` checks for the existence of multiple different elements in a set."},{"id":"1647547576411","type":"redis","content":"SMISMEMBER colors:1 red green blue"},{"id":"1647548847120","type":"markdown","content":"`SCARD` returns the cardinality, or number of elements in a set."},{"id":"1647547796544","type":"redis","content":"SCARD colors:1"},{"id":"1647548861515","type":"markdown","content":"`SREM` removes an element from a set."},{"id":"1647548112395","type":"redis","content":"SREM colors:2 blue\n\nSISMEMBER colors:2 blue"},{"id":"1647548880550","type":"markdown","content":"`SSCAN` iterates through all the elements of a set page by page.  The `COUNT` option can be used to limit the number of elements returned per page."},{"id":"1647548230443","type":"redis","content":"SSCAN colors:1 0 COUNT 2\n\nSSCAN colors:1 3 COUNT 2"}],"id":"466b6f0cb0f691b3"}